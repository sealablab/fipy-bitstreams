-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BoxcarAveragerFixedPointPublish\DSP.vhd
-- Created: 2024-10-21 19:53:33
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.2e-09
-- Target subsystem base rate: 3.2e-09
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSP
-- Source Path: BoxcarAveragerFixedPointPublish/DSP
-- Hierarchy Level: 0
-- Model version: 6.10
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY DSP IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        InputA                            :   IN    signed(15 DOWNTO 0);  -- int16
        InputB                            :   IN    signed(15 DOWNTO 0);  -- int16
        TriggerLevel                      :   IN    signed(15 DOWNTO 0);  -- int16
        TriggerDelay                      :   IN    signed(15 DOWNTO 0);  -- int16
        GateWidth                         :   IN    signed(15 DOWNTO 0);  -- int16
        AvgLength                         :   IN    signed(15 DOWNTO 0);  -- int16
        SwitchControl                     :   IN    signed(15 DOWNTO 0);  -- int16
        Gain                              :   IN    signed(31 DOWNTO 0);  -- int32
        OutputA                           :   OUT   signed(15 DOWNTO 0);  -- int16
        OutputB                           :   OUT   signed(15 DOWNTO 0)  -- int16
        );
END DSP;


ARCHITECTURE rtl OF DSP IS

  -- Component Declarations
  COMPONENT Detect_Rise_Positive
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          U                               :   IN    signed(16 DOWNTO 0);  -- sfix17
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Boxcar_FixPt
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          SignalInput                     :   IN    signed(15 DOWNTO 0);  -- int16
          Trigger                         :   IN    std_logic;
          TriggerDelay                    :   IN    unsigned(15 DOWNTO 0);  -- uint16
          GateLength                      :   IN    unsigned(15 DOWNTO 0);  -- uint16
          AverageOut                      :   OUT   signed(31 DOWNTO 0);  -- int32
          AveragingFlag                   :   OUT   std_logic;  -- ufix1
          DataValid                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT Averager_FixPt
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          DataIn                          :   IN    signed(31 DOWNTO 0);  -- int32
          AvgLength                       :   IN    unsigned(15 DOWNTO 0);  -- uint16
          ValidIn                         :   IN    std_logic;  -- ufix1
          ValidOut                        :   OUT   std_logic;  -- ufix1
          DataOut                         :   OUT   signed(47 DOWNTO 0)  -- sfix48
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Detect_Rise_Positive
    USE ENTITY work.Detect_Rise_Positive(rtl);

  FOR ALL : Boxcar_FixPt
    USE ENTITY work.Boxcar_FixPt(rtl);

  FOR ALL : Averager_FixPt
    USE ENTITY work.Averager_FixPt(rtl);

  -- Signals
  SIGNAL Result_Bypass_Bit_out1           : std_logic;  -- ufix1
  SIGNAL HwModeRegister_reg               : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Add_out1                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Convertor_Control1_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control2_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL AverageOut                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL AveragingFlag                    : std_logic;  -- ufix1
  SIGNAL DataValid                        : std_logic;  -- ufix1
  SIGNAL Convertor_Control3_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ValidOut                         : std_logic;  -- ufix1
  SIGNAL DataOut                          : signed(47 DOWNTO 0);  -- sfix48
  SIGNAL DataOut_1                        : signed(47 DOWNTO 0);  -- sfix48
  SIGNAL Convertor_Control5_out1          : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Convertor_Control5_out1_1        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Multiply_Add_mul_mul_temp        : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL mulOutput                        : signed(79 DOWNTO 0);  -- sfix80_En16
  SIGNAL HwModeRegister_reg_1             : vector_of_signed80(0 TO 3);  -- sfix80 [4]
  SIGNAL mulOutput_1                      : signed(79 DOWNTO 0);  -- sfix80_En16
  SIGNAL Multiply_Add_out1                : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL delayMatch1_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Result_Bypass_Bit_out1_1         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Multiply_Add_out1_1              : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL Multiply_Add_out1_2              : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL alpha16_bit_Saturation_out1      : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL Convertor_OutputA_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL delayMatch_reg                   : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Delay1_out1_1                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Result_Bypass_Switch_out1        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Flag_Bypass_Bit_out1             : std_logic;  -- ufix1
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Flag_Bypass_Switch_out1          : std_logic;  -- ufix1
  SIGNAL Rescale_Convertor_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Convertor_OutputB_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL delayMatch2_reg                  : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Delay2_out1_1                    : signed(15 DOWNTO 0);  -- int16

  ATTRIBUTE use_dsp : string;

  ATTRIBUTE use_dsp OF mulOutput : SIGNAL IS "yes";

BEGIN
  u_Detect_Rise_Positive : Detect_Rise_Positive
    PORT MAP( Clk => Clk,
              Reset => Reset,
              U => Add_out1,  -- sfix17
              Y => Detect_Rise_Positive_out1
              );

  u_Boxcar_FixPt : Boxcar_FixPt
    PORT MAP( Clk => Clk,
              Reset => Reset,
              SignalInput => Delay1_out1,  -- int16
              Trigger => Detect_Rise_Positive_out1,
              TriggerDelay => Convertor_Control1_out1,  -- uint16
              GateLength => Convertor_Control2_out1,  -- uint16
              AverageOut => AverageOut,  -- int32
              AveragingFlag => AveragingFlag,  -- ufix1
              DataValid => DataValid  -- ufix1
              );

  u_Averager_FixPt : Averager_FixPt
    PORT MAP( Clk => Clk,
              Reset => Reset,
              DataIn => AverageOut,  -- int32
              AvgLength => Switch_out1,  -- uint16
              ValidIn => DataValid,  -- ufix1
              ValidOut => ValidOut,  -- ufix1
              DataOut => DataOut  -- sfix48
              );

  Result_Bypass_Bit_out1 <= SwitchControl(1);

  HwModeRegister_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg <= (OTHERS => '0');
      ELSE 
        HwModeRegister_reg(0) <= '0';
        HwModeRegister_reg(4 DOWNTO 1) <= HwModeRegister_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Constant_out1 <= HwModeRegister_reg(4);

  Delay1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        Delay1_reg(0) <= InputA;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Add_out1 <= resize(InputB, 17) - resize(TriggerLevel, 17);

  Convertor_Control1_out1 <= unsigned(TriggerDelay);

  Convertor_Control2_out1 <= unsigned(GateWidth);

  Convertor_Control3_out1 <= unsigned(AvgLength);

  
  switch_compare_1 <= '1' WHEN Convertor_Control3_out1 > to_unsigned(16#0000#, 16) ELSE
      '0';

  
  Switch_out1 <= to_unsigned(16#0001#, 16) WHEN switch_compare_1 = '0' ELSE
      Convertor_Control3_out1;

  HwModeRegister_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        DataOut_1 <= to_signed(0, 48);
      ELSE 
        DataOut_1 <= DataOut;
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;


  Convertor_Control5_out1 <= unsigned(Gain);

  HwModeRegister1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Convertor_Control5_out1_1 <= to_unsigned(0, 32);
      ELSE 
        Convertor_Control5_out1_1 <= Convertor_Control5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Multiply_Add_mul_mul_temp <= DataOut_1 * signed(resize(Convertor_Control5_out1_1, 33));
  mulOutput <= Multiply_Add_mul_mul_temp(79 DOWNTO 0);

  HwModeRegister_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg_1 <= (OTHERS => to_signed(0, 80));
      ELSE 
        HwModeRegister_reg_1(0) <= mulOutput;
        HwModeRegister_reg_1(1 TO 3) <= HwModeRegister_reg_1(0 TO 2);
      END IF;
    END IF;
  END PROCESS HwModeRegister_2_process;

  mulOutput_1 <= HwModeRegister_reg_1(3);

  Multiply_Add_out1 <= signed(resize(unsigned'(Constant_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 82)) + (resize(mulOutput_1, 82));

  delayMatch1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSE 
        delayMatch1_reg(0) <= Result_Bypass_Bit_out1;
        delayMatch1_reg(5 DOWNTO 1) <= delayMatch1_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Result_Bypass_Bit_out1_1 <= delayMatch1_reg(5);

  
  switch_compare_1_1 <= '1' WHEN Result_Bypass_Bit_out1_1 > '0' ELSE
      '0';

  HwModeRegister_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Multiply_Add_out1_1 <= to_signed(0, 82);
      ELSE 
        Multiply_Add_out1_1 <= Multiply_Add_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_3_process;


  
  Multiply_Add_out1_2 <= "011111111111111111111111111111111111111111111111111111111111111111111111111111111" WHEN (Multiply_Add_out1_1(81) = '0') AND (Multiply_Add_out1_1(80) /= '0') ELSE
      "100000000000000000000000000000000000000000000000000000000000000000000000000000000" WHEN (Multiply_Add_out1_1(81) = '1') AND (Multiply_Add_out1_1(80) /= '1') ELSE
      Multiply_Add_out1_1(80 DOWNTO 0);

  
  alpha16_bit_Saturation_out1 <= to_signed(2147418112, 81) WHEN Multiply_Add_out1_2 > to_signed(2147418112, 81) ELSE
      signed'("111111111111111111111111111111111111111111111111110000000000000000000000000000000") WHEN Multiply_Add_out1_2 < signed'("111111111111111111111111111111111111111111111111110000000000000000000000000000000") ELSE
      Multiply_Add_out1_2;

  Convertor_OutputA_out1 <= alpha16_bit_Saturation_out1(31 DOWNTO 16);

  delayMatch_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        delayMatch_reg(0) <= Delay1_out1;
        delayMatch_reg(1 TO 5) <= delayMatch_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay1_out1_1 <= delayMatch_reg(5);

  
  Result_Bypass_Switch_out1 <= Convertor_OutputA_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay1_out1_1;

  Delay3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSE 
        Delay3_out1 <= Result_Bypass_Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Flag_Bypass_Bit_out1 <= SwitchControl(0);

  
  switch_compare_1_2 <= '1' WHEN Flag_Bypass_Bit_out1 > '0' ELSE
      '0';

  
  Flag_Bypass_Switch_out1 <= AveragingFlag WHEN switch_compare_1_2 = '0' ELSE
      ValidOut;

  Rescale_Convertor_out1 <= signed(resize(unsigned'(Flag_Bypass_Switch_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 16));

  Convertor_OutputB_out1 <= Rescale_Convertor_out1;

  Delay2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSE 
        Delay2_out1 <= Convertor_OutputB_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  delayMatch2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch2_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        delayMatch2_reg(0) <= Delay2_out1;
        delayMatch2_reg(1 TO 5) <= delayMatch2_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Delay2_out1_1 <= delayMatch2_reg(5);

  OutputA <= Delay3_out1;

  OutputB <= Delay2_out1_1;

END rtl;

