-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\DualBoxcarAveragerFixedPoint\DSP.vhd
-- Created: 2025-03-30 20:27:36
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.2e-09
-- Target subsystem base rate: 3.2e-09
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSP
-- Source Path: DualBoxcarAveragerFixedPoint/DSP
-- Hierarchy Level: 0
-- Model version: 6.42
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY DSP IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        InputA                            :   IN    signed(15 DOWNTO 0);  -- int16
        InputB                            :   IN    signed(15 DOWNTO 0);  -- int16
        TriggerLevel                      :   IN    signed(15 DOWNTO 0);  -- int16
        TriggerDelay_0                    :   IN    signed(15 DOWNTO 0);  -- int16
        GateWidth_0                       :   IN    signed(15 DOWNTO 0);  -- int16
        AvgLength_0                       :   IN    signed(15 DOWNTO 0);  -- int16
        AlignSwitch                       :   IN    std_logic;
        Gain_0                            :   IN    signed(31 DOWNTO 0);  -- int32
        TriggerDelayBaseline_0            :   IN    signed(15 DOWNTO 0);  -- int16
        FlagSwitch                        :   IN    std_logic;
        TriggerDelay_1                    :   IN    signed(15 DOWNTO 0);  -- int16
        GateWidth_1                       :   IN    signed(15 DOWNTO 0);  -- int16
        AvgLength_1                       :   IN    signed(15 DOWNTO 0);  -- int16
        TriggerDelayBaseline_1            :   IN    signed(15 DOWNTO 0);  -- int16
        Gain_1                            :   IN    signed(31 DOWNTO 0);  -- int32
        OutBSwitch                        :   IN    std_logic;
        OutASwitch                        :   IN    std_logic;
        OutputA                           :   OUT   signed(15 DOWNTO 0);  -- int16
        OutputB                           :   OUT   signed(15 DOWNTO 0)  -- int16
        );
END DSP;


ARCHITECTURE rtl OF DSP IS

  -- Component Declarations
  COMPONENT Detect_Rise_Positive
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          U                               :   IN    signed(16 DOWNTO 0);  -- sfix17
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Dual_Averager_0
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          SignalInput                     :   IN    signed(15 DOWNTO 0);  -- int16
          Trigger                         :   IN    std_logic;
          TriggerDelay                    :   IN    unsigned(15 DOWNTO 0);  -- uint16
          GateLength                      :   IN    unsigned(15 DOWNTO 0);  -- uint16
          TriggerDelayBaseline            :   IN    unsigned(15 DOWNTO 0);  -- uint16
          AvgLength                       :   IN    unsigned(15 DOWNTO 0);  -- uint16
          DataOut                         :   OUT   signed(48 DOWNTO 0);  -- sfix49
          FlagOut                         :   OUT   signed(15 DOWNTO 0)  -- int16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Detect_Rise_Positive
    USE ENTITY work.Detect_Rise_Positive(rtl);

  FOR ALL : Dual_Averager_0
    USE ENTITY work.Dual_Averager_0(rtl);

  -- Signals
  SIGNAL delayMatch2_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL OutASwitch_1                     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL HwModeRegister_reg               : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Add_out1                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Convertor_Control6_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control7_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control9_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control8_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Dual_Averager_1_out1             : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Dual_Averager_1_out2             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay3_out1                      : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Delay3_out1_1                    : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Convertor_Control10_out1         : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Convertor_Control10_out1_1       : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Multiply_Add1_mul_mul_temp       : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL mulOutput                        : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL HwModeRegister_reg_1             : vector_of_signed81(0 TO 3);  -- sfix81 [4]
  SIGNAL mulOutput_1                      : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL Multiply_Add1_out1               : signed(82 DOWNTO 0);  -- sfix83_En16
  SIGNAL Multiply_Add1_out1_1             : signed(82 DOWNTO 0);  -- sfix83_En16
  SIGNAL Multiply_Add1_out1_2             : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL alpha16_bit_Saturation1_out1     : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL Convertor_OutputA1_out1          : signed(15 DOWNTO 0);  -- int16
  SIGNAL HwModeRegister_reg_2             : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Convertor_Control1_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control2_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control4_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Convertor_Control3_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Dual_Averager_0_out1             : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Dual_Averager_0_out2             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay_out1                       : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Delay_out1_1                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Convertor_Control5_out1          : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Convertor_Control5_out1_1        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Multiply_Add_mul_mul_temp        : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL mulOutput_2                      : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL HwModeRegister_reg_3             : vector_of_signed81(0 TO 3);  -- sfix81 [4]
  SIGNAL mulOutput_3                      : signed(80 DOWNTO 0);  -- sfix81_En16
  SIGNAL Multiply_Add_out1                : signed(82 DOWNTO 0);  -- sfix83_En16
  SIGNAL delayMatch1_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL AlignSwitch_1                    : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Multiply_Add_out1_1              : signed(82 DOWNTO 0);  -- sfix83_En16
  SIGNAL Multiply_Add_out1_2              : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL alpha16_bit_Saturation_out1      : signed(81 DOWNTO 0);  -- sfix82_En16
  SIGNAL Convertor_OutputA_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL delayMatch_reg                   : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Delay1_out1_1                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Result_Bypass_Switch_out1        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Flag_Bypass_Switch2_out1         : signed(15 DOWNTO 0);  -- int16
  SIGNAL delayMatch4_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL OutBSwitch_1                     : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Flag_Bypass_Switch_out1          : signed(15 DOWNTO 0);  -- int16
  SIGNAL delayMatch3_reg                  : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Flag_Bypass_Switch_out1_1        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Flag_Bypass_Switch1_out1         : signed(15 DOWNTO 0);  -- int16

  ATTRIBUTE use_dsp : string;

  ATTRIBUTE use_dsp OF mulOutput : SIGNAL IS "yes";
  ATTRIBUTE use_dsp OF mulOutput_2 : SIGNAL IS "yes";

BEGIN
  u_Detect_Rise_Positive : Detect_Rise_Positive
    PORT MAP( Clk => Clk,
              Reset => Reset,
              U => Add_out1,  -- sfix17
              Y => Detect_Rise_Positive_out1
              );

  u_Dual_Averager_1 : Dual_Averager_0
    PORT MAP( Clk => Clk,
              Reset => Reset,
              SignalInput => Delay1_out1,  -- int16
              Trigger => Detect_Rise_Positive_out1,
              TriggerDelay => Convertor_Control6_out1,  -- uint16
              GateLength => Convertor_Control7_out1,  -- uint16
              TriggerDelayBaseline => Convertor_Control9_out1,  -- uint16
              AvgLength => Convertor_Control8_out1,  -- uint16
              DataOut => Dual_Averager_1_out1,  -- sfix49
              FlagOut => Dual_Averager_1_out2  -- int16
              );

  u_Dual_Averager_0 : Dual_Averager_0
    PORT MAP( Clk => Clk,
              Reset => Reset,
              SignalInput => Delay1_out1,  -- int16
              Trigger => Detect_Rise_Positive_out1,
              TriggerDelay => Convertor_Control1_out1,  -- uint16
              GateLength => Convertor_Control2_out1,  -- uint16
              TriggerDelayBaseline => Convertor_Control4_out1,  -- uint16
              AvgLength => Convertor_Control3_out1,  -- uint16
              DataOut => Dual_Averager_0_out1,  -- sfix49
              FlagOut => Dual_Averager_0_out2  -- int16
              );

  delayMatch2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSE 
        delayMatch2_reg(0) <= OutASwitch;
        delayMatch2_reg(5 DOWNTO 1) <= delayMatch2_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  OutASwitch_1 <= delayMatch2_reg(5);

  
  switch_compare_1 <= '1' WHEN OutASwitch_1 > '0' ELSE
      '0';

  HwModeRegister_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg <= (OTHERS => '0');
      ELSE 
        HwModeRegister_reg(0) <= '0';
        HwModeRegister_reg(4 DOWNTO 1) <= HwModeRegister_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Constant1_out1 <= HwModeRegister_reg(4);

  Delay1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        Delay1_reg(0) <= InputA;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Add_out1 <= resize(InputB, 17) - resize(TriggerLevel, 17);

  Convertor_Control6_out1 <= unsigned(TriggerDelay_1);

  Convertor_Control7_out1 <= unsigned(GateWidth_1);

  Convertor_Control9_out1 <= unsigned(TriggerDelayBaseline_1);

  Convertor_Control8_out1 <= unsigned(AvgLength_1);

  Delay3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay3_out1 <= to_signed(0, 49);
      ELSE 
        Delay3_out1 <= Dual_Averager_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  HwModeRegister3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay3_out1_1 <= to_signed(0, 49);
      ELSE 
        Delay3_out1_1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Convertor_Control10_out1 <= unsigned(Gain_1);

  HwModeRegister4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Convertor_Control10_out1_1 <= to_unsigned(0, 32);
      ELSE 
        Convertor_Control10_out1_1 <= Convertor_Control10_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  Multiply_Add1_mul_mul_temp <= Delay3_out1_1 * signed(resize(Convertor_Control10_out1_1, 33));
  mulOutput <= Multiply_Add1_mul_mul_temp(80 DOWNTO 0);

  HwModeRegister_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg_1 <= (OTHERS => to_signed(0, 81));
      ELSE 
        HwModeRegister_reg_1(0) <= mulOutput;
        HwModeRegister_reg_1(1 TO 3) <= HwModeRegister_reg_1(0 TO 2);
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;

  mulOutput_1 <= HwModeRegister_reg_1(3);

  Multiply_Add1_out1 <= signed(resize(unsigned'(Constant1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 83)) + (resize(mulOutput_1, 83));

  HwModeRegister_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Multiply_Add1_out1_1 <= to_signed(0, 83);
      ELSE 
        Multiply_Add1_out1_1 <= Multiply_Add1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_2_process;


  
  Multiply_Add1_out1_2 <= "0111111111111111111111111111111111111111111111111111111111111111111111111111111111" WHEN (Multiply_Add1_out1_1(82) = '0') AND (Multiply_Add1_out1_1(81) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000000000000000000000000000000000000" WHEN (Multiply_Add1_out1_1(82) = '1') AND (Multiply_Add1_out1_1(81) /= '1') ELSE
      Multiply_Add1_out1_1(81 DOWNTO 0);

  
  alpha16_bit_Saturation1_out1 <= to_signed(2147418112, 82) WHEN Multiply_Add1_out1_2 > to_signed(2147418112, 82) ELSE
      signed'("1111111111111111111111111111111111111111111111111110000000000000000000000000000000") WHEN Multiply_Add1_out1_2 < signed'("1111111111111111111111111111111111111111111111111110000000000000000000000000000000") ELSE
      Multiply_Add1_out1_2;

  Convertor_OutputA1_out1 <= alpha16_bit_Saturation1_out1(31 DOWNTO 16);

  HwModeRegister_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg_2 <= (OTHERS => '0');
      ELSE 
        HwModeRegister_reg_2(0) <= '0';
        HwModeRegister_reg_2(4 DOWNTO 1) <= HwModeRegister_reg_2(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_3_process;

  Constant_out1 <= HwModeRegister_reg_2(4);

  Convertor_Control1_out1 <= unsigned(TriggerDelay_0);

  Convertor_Control2_out1 <= unsigned(GateWidth_0);

  Convertor_Control4_out1 <= unsigned(TriggerDelayBaseline_0);

  Convertor_Control3_out1 <= unsigned(AvgLength_0);

  Delay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay_out1 <= to_signed(0, 49);
      ELSE 
        Delay_out1 <= Dual_Averager_0_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  HwModeRegister_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay_out1_1 <= to_signed(0, 49);
      ELSE 
        Delay_out1_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_4_process;


  Convertor_Control5_out1 <= unsigned(Gain_0);

  HwModeRegister1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Convertor_Control5_out1_1 <= to_unsigned(0, 32);
      ELSE 
        Convertor_Control5_out1_1 <= Convertor_Control5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Multiply_Add_mul_mul_temp <= Delay_out1_1 * signed(resize(Convertor_Control5_out1_1, 33));
  mulOutput_2 <= Multiply_Add_mul_mul_temp(80 DOWNTO 0);

  HwModeRegister_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg_3 <= (OTHERS => to_signed(0, 81));
      ELSE 
        HwModeRegister_reg_3(0) <= mulOutput_2;
        HwModeRegister_reg_3(1 TO 3) <= HwModeRegister_reg_3(0 TO 2);
      END IF;
    END IF;
  END PROCESS HwModeRegister_5_process;

  mulOutput_3 <= HwModeRegister_reg_3(3);

  Multiply_Add_out1 <= signed(resize(unsigned'(Constant_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 83)) + (resize(mulOutput_3, 83));

  delayMatch1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSE 
        delayMatch1_reg(0) <= AlignSwitch;
        delayMatch1_reg(5 DOWNTO 1) <= delayMatch1_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  AlignSwitch_1 <= delayMatch1_reg(5);

  
  switch_compare_1_1 <= '1' WHEN AlignSwitch_1 > '0' ELSE
      '0';

  HwModeRegister_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Multiply_Add_out1_1 <= to_signed(0, 83);
      ELSE 
        Multiply_Add_out1_1 <= Multiply_Add_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_6_process;


  
  Multiply_Add_out1_2 <= "0111111111111111111111111111111111111111111111111111111111111111111111111111111111" WHEN (Multiply_Add_out1_1(82) = '0') AND (Multiply_Add_out1_1(81) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000000000000000000000000000000000000" WHEN (Multiply_Add_out1_1(82) = '1') AND (Multiply_Add_out1_1(81) /= '1') ELSE
      Multiply_Add_out1_1(81 DOWNTO 0);

  
  alpha16_bit_Saturation_out1 <= to_signed(2147418112, 82) WHEN Multiply_Add_out1_2 > to_signed(2147418112, 82) ELSE
      signed'("1111111111111111111111111111111111111111111111111110000000000000000000000000000000") WHEN Multiply_Add_out1_2 < signed'("1111111111111111111111111111111111111111111111111110000000000000000000000000000000") ELSE
      Multiply_Add_out1_2;

  Convertor_OutputA_out1 <= alpha16_bit_Saturation_out1(31 DOWNTO 16);

  delayMatch_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        delayMatch_reg(0) <= Delay1_out1;
        delayMatch_reg(1 TO 5) <= delayMatch_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay1_out1_1 <= delayMatch_reg(5);

  
  Result_Bypass_Switch_out1 <= Convertor_OutputA_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay1_out1_1;

  
  Flag_Bypass_Switch2_out1 <= Convertor_OutputA1_out1 WHEN switch_compare_1 = '0' ELSE
      Result_Bypass_Switch_out1;

  delayMatch4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSE 
        delayMatch4_reg(0) <= OutBSwitch;
        delayMatch4_reg(5 DOWNTO 1) <= delayMatch4_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  OutBSwitch_1 <= delayMatch4_reg(5);

  
  switch_compare_1_2 <= '1' WHEN OutBSwitch_1 > '0' ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN FlagSwitch > '0' ELSE
      '0';

  Delay4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 16);
      ELSE 
        Delay4_out1 <= Dual_Averager_1_out2;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSE 
        Delay2_out1 <= Dual_Averager_0_out2;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Flag_Bypass_Switch_out1 <= Delay4_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay2_out1;

  delayMatch3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch3_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSE 
        delayMatch3_reg(0) <= Flag_Bypass_Switch_out1;
        delayMatch3_reg(1 TO 5) <= delayMatch3_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Flag_Bypass_Switch_out1_1 <= delayMatch3_reg(5);

  
  Flag_Bypass_Switch1_out1 <= Convertor_OutputA1_out1 WHEN switch_compare_1_2 = '0' ELSE
      Flag_Bypass_Switch_out1_1;

  OutputA <= Flag_Bypass_Switch2_out1;

  OutputB <= Flag_Bypass_Switch1_out1;

END rtl;

